* Continuous Integration
- Problem/question: every CI system set-up has ended up being just
  about satisfactory, but not satisfactorily in other ways.
- It's 2016, can we do better.
- A nice web UI is nice, but how does that affect versioning of the CI
  setup?
** One approach
- Jenkins with cloudbees DSL
- Minimal config - run DSL from a SCM repo
- Jobs just take a branch to test as a parameter
- Generally works fairly well
- In other Jenkins setup, they have a single Jenkins job that reads a
  well-known filename from each repo and runs that Groovy
- Basic setup is with chef (auth etc), Jenkins config is synced to a
  git repo using scmsync Jenkins plugin
* Who is something other than Jenkins?
** Chef employee (who is happy to be attributed here) says they use a lot of Jenkins, but also produces Chef Delivery
- Chef Delivery is extremely opinionated, deliberately.
** GoCD (from Thoughtworks) is very opionionated.
- Easy to start with thanks to that opinionation.
** Another team using TeamCity
- Better UI than Jenkins
- About 5-6 people have used TeamCity
- Chaining jobs seems awkward (i.e. "when I finish, run this job")
** Some teams moving to Travis
** Anyone using ConcourseCI?
** CircleCI
- One team prototyping with Consource now. Looking to use Rundeck to
  actually deploy.
- No interface to click around in and make uncontrolled changes.
* Is everyone using Jenkins for build, test and deploy?
- "If you start using Jenkins, you end up using it for everything"
* Jenkins seems to come from a world where Jenkins is all about building .war files
- it's a general pipeline/scheduling system
* What does ideal look like?
- Something that will run commands with parameters and store exit
  codes
- Give feedback on pass/fail
- git pull/hooks
- An API to run several things in parallel (this team have about 90
  minutes worth of tests they want to run across any slaves)
- A graphical representation of pipeline with constraints (i.e. deploy
  to staging before production, manual step)
* Does anyone spin up slaves temporarily, on AWS for example?
- TeamCity and Jenkins have plugins that can spin up instances on AWS
  and set up a slave
- Might be possible to set something up in Auto Scaling Groups (ASGs),
  but there is a plugin.
* Anyone using ChatOps/deployments via chat systems
- Few teams have done it, be careful with auth
* How to you deal with nodes in ASGs and possibly Jenkins nodes that are in ASG.
- Many solutions: mco, SQS, plenty ways of doing it
* One team is bundling configuration management (chef) and application
- private cookbooks and Berksfile and application code in a single
  repo, it's all tested together
* What does it mean to version an application?
- It's the union of everything that makes up that application. You
  need everything.
- Magical fantasty land of immutable servers is one approach, but
  isn't realistic for services with state.
* Another problem: how do I test migration of my server from v8 to v9 for example, from bare metal?
- Build a VM of v8
- Use v8 VM as your initial state for tests for the migration using v9
  code
- rinse, repeat.
- Stand up new system to check new build as well as upgrade path
* Anyone used continuous deployment with feature toggles?
- Yes: initial rollout is dark from a user point of view
- Enable for 1% of users
- Controlled via additional header added to requests to backend server
  by Brocade switches
- Phased rollouts are a requirement
- If you're not in an environment that isn't used to phased rollouts,
  it can be a hard-sell initially. Some times it takes things to go
  badly wrong with big-bang rollouts. Other times, just do it a few
  times and people see the value.
* How do you do database updates
- Migrations pre-releasing code
- Roll code back if it can't support the changed database
- Be careful with autogenerated migration code
- Some teams explcitly seperate database migrations, others explicitly
  couple them. Either way, be very aware of what you're deploying and
  run through a representative staging environment
* blog post: http://engineering.skybettingandgaming.com/2016/03/01/delivery-pipelines-kitchen-chef-docker/
