* Secrets management
- How many people store secrets in SCM?
- GPG encrypted files committed to SCM
- Looking at Hashicorp's Vault.
- How are other people solving this issue?
- How do they make sure that if a password changes, how do you know
  what's changed?
- Many passwords in one file, or something else?
- What about shared secrets like API keys?
* One solution: Very locked down namespaced S3 bucket, namespaced by feature
- Owners have read-write access for a feature/service
- Can create users with a password and give another team access to
  read that secret
- Each instance/app restarts, reads its secret from the S3 bucket
- Rotate by changing the file
- Harder to give write access
- Bottleneck is on the team that owns the original service
- Use AWS for everything and an IAM user in each account (same
  username across accounts to help with scripting, [implicit: multiple
  AWS accounts])
- Users were created by hand, now moving to infrastructure-as-code
  (IaC) - CloudFormation in this case.
- Will be using temporary roles
* Another solution:
- using eYAML
- Listens to git hooks
- Writes new secret, but reading is actually more complex.
* If you're in Amazon, using roles and profiles definitely the way to go
- Being able to assume the same role as your application or whatever
  is every useful to debug apps etc
* Is anyone using Hashicorp Vault?
- One group using it in production for over a year. Adapoted it early.
- Every early on there were issues
- HA was hard early on, appears to be fixed now
** How do you deal with sealing and unsealing the vault? Vault prioritises security over availability.
- If your app gets all its secrets at start-up time, then you don't
  necessarily need Vault available all of the time.
- But then Vault encourages rolling secrets - credentials aren't
  static.
- Difference between long lived secrets and session-types secrets.
- If you lose an instance, Vault will seal. Need 3/5 unlock keys by
  default, but it is configureable.
* How do you do HA? If you lose an instance, are the other nodes locked?
- Yes, nodes are locked, treated as an alertable incident, pages
  on-call person to unlock the vault.
- Using Consol as a backend
* Anyone using KMS for secrets management
- Couple of people using credstash - DynamoDB, KMS and CloudTrail for
  audit. Simple and audit trail handy.
- DynamoDB scaling might be an issue, have to think what the initial
  size is.
- One team using KMS directly with a simple KMS grant; environments in
  their own AWS account. Can only access their own secrets that was.
* Q: what about database secrets?
- How do you ensure that an application can get access to a new
  database, if you don't have access to LDAP, or some other shared
  auth store?
- How do you ensure you manage user accounts correctly? Ensuring that
  user accounts get revokes when they leave? This team had to resort
  to writing a tool to check LDAP and compare that to a set of other
  systems.
- One large organisation did this pragmatically with process, not
  technology - ensure that leavers hand back hardware, follow a
  documented list of systems to lock accounts out - it's cheaper to do
  with with people than technology, especially when there aren't APIs
  to use.
- A lot of SaaS products help to reference Github accounts etc
- Single sign-on would be handy for user account stuff, assuming it
  actually worked
* How do people deal with 2 factor auth (2FA)? Are Yubi keys worthwhile?
- Yubikey is good, but some orgs don't like plugging keyboard like
  devices in
* AWS accounts - best process is 2FA - where do you store the token?
- Back-up the QR code or the secret, print it and lock away
- Buying the hardware token generators and lock that away is fine;
  some gotchas: they can go out of sync or the battery dies - get more
  than you need
- Storing your API key and 2FA token in 1password/LastPass etc might
  be OK, but it's arguable if you've got a good secrets management/2FA
  if you put all the secrets in the same place. Beware.
- SMS for IAM users, not obvious to find and not currently in the
  console (see http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_sms.html)
- Arguable SMS is not 2FA any more, as SMS can go to laptops etc with
  iMessage and the like.
* About 1/3 of the room using Yubikeys generally
- Once a GPG private key is in the device, you can't extract them
  again, which is handy
- Some issues with OTP with AWS
* Q: does anyone have a policy on SSH key size and password?
- "Generally whatever ssh-keygen gives, right"? :)
- Hard to check for a password on an SSH key
- You don't have to solve everything with technology: breaching a
  policy is fire-able.
* Does anyone rotate SSH keys?
- Few people rotate keys every month or so
- Some teams check the last time a key was committed/configured, but
  don't lock accounts out, just warn
- Locking accounts automatically can be dangerous - automatically lock
  your team out over a bank holiday doesn't go down well.
- Vault's SSH backend copies temporary keys to nodes, they're only
  valid for so long
- CloudFoundry's BOSH does something similar
* Does anyone watch chat logs, commits for keys?
- There are git commit hooks - precommit from Yelp and another from
  AWS.
- Looks like github are also checking repos
- Pre-push hook called talisman looking at patterns in commits
* What about certificates?
- Two teams treat certificates like any other password - eYAML etc.
- One team planning letsencrypt or AWS's new(ish) cert service (CMS?), but
  it's not in eu-west yet.
- Someone has written a letsencrypt for ELBs.
* Anyone tried/had to convincing internal people that KMS/Amazon Cert Management is more secure than a home-rolled solution?
- One person has encountered a situation where a party is concerned
  that an AWS HSM might be affected by state actors
- Most people have other issues to worry about
- Observation: the problem with HSMs just give you a key. It's probably just a
  badly maintained linux box under the covers
* Anyone not using Vault generating passwords automatically?
- Couple of teams' deploy pipeline generates passwords in YAML file
  and uses those credentials.
* How do people deal with proving ownership of a domain, especially if it's manual phone/email?
- Wildcard certs help a bit - you only have to go through the dance
  once.
- letsencrypt's ACME will hopefully become more wildly
  used/offered. Sounds like other CAs will start offering services via ACME.
